@page "/AddPerson"
@using DNP_Assignment2_Client.Data
@using DNP_Assignment2_Client.Models.Unit

@inject IModelManager ModelManager
@inject NavigationManager NavigationManager

<h3>Add Person</h3>

<EditForm Model="@newPerson" OnValidSubmit="@AddNewPerson">
    <DataAnnotationsValidator/>
    <p style="color: red">@error</p>
    <ValidationSummary/>
    <div style="float: left;width: 100%">
        <p style="float: left;position: relative;height: 32px;top: 4px">
            Id:<input type="number" min="0" style="width:150px" @bind="@newPerson.Id"/>
            Type:
        </p>
        <select class="form-control selectpicker" style="float: left;position: relative;width:auto;height: 32px;top: 4px" @bind="@personType">
            <option>Adult</option>
            <option>Child</option>
        </select>
        <button class="btn-primary" type="submit" style="float: left;position: relative;width:auto;left:15%;height: 32px;top: 4px;border-radius: 5px">Save</button>
    </div>
    <div style="float: left;width: 100%">
        <p style="float: left;position: relative;height: 32px;top: 4px">
            Age:<input type="number" min="0" style="width:150px" @bind="@newPerson.Age"/>
            Sex:
        </p>
        <select class="form-control selectpicker" style="float: left;position: relative;width:auto;height: 32px;top: 4px" @bind="@newPerson.Sex">
            <option>M</option>
            <option>F</option>
        </select>
    </div>
    <div style="float: left;width: 100%">
        <p style="float: left;position: relative;height: 32px;top: 4px">
            First name:<input type="text" style="width:150px" @bind="@newPerson.FirstName"/>
        </p>
        <p style="float: left;width: 5px"></p>
        <p style="float: left;position: relative;height: 32px;top: 4px">
            Last name:<input type="text" style="width:150px" @bind="@newPerson.LastName"/>
        </p>
    </div>
    <div style="float: left;width: 100%">
        <p style="float: left;position: relative;top: 8px">
            Hair color:
        </p>
        <select class="form-control selectpicker" style="float: left;position: relative;width:auto;height: 32px;top: 4px" @bind="@newPerson.HairColor">
            @foreach (var hairColor in Person.ValidHairColor)
            {
                <option>@hairColor</option>
            }
        </select>
        <p style="float: left;width: 5px"></p>
        <p style="float: left;position: relative;top: 8px">
            Eye color:
        </p>
        <select class="form-control selectpicker" style="float: left;position: relative;width:auto;height: 32px;top: 4px" @bind="@newPerson.EyeColor">
            @foreach (var eyeColor in Person.ValidEyeColor)
            {
                <option>@eyeColor</option>
            }
        </select>
    </div>
    <div style="float: left;width: 100%">
        <p style="float: left;position: relative;height: 32px;top: 4px">
            Weight:<input type="number" min="0" step="0.1" style="width:150px" @bind="@newPerson.Weight"/>
            Height:<input type="number" min="0" style="width:150px" @bind="@newPerson.Height"/>
        </p>
    </div>
    @switch (personType)
    {
        case "Adult":
            <div style="float: left;width: 100%">
                <p style="float: left;position: relative;top: 8px">
                    Job:
                </p>
                <select class="form-control selectpicker" style="float: left;position: relative;width:auto;height: 32px;top: 4px" @bind="@jobTitle">
                    @foreach (var jobType in Adult.ValidJob)
                    {
                        <option>@jobType</option>
                    }
                </select>
            </div>
            break;
        case "Child":
            <div style="float: left;width: 100%">
                <p style="float: left;position: relative;top: 8px">
                    Interest:
                </p>
                <form>
                    @foreach (string interest in Interest.ValidInterest)
                    {
                        <input type="checkbox" @onclick="@(()=>ChooseInterest(interest))">@interest
                    }
                </form>
            </div>
            break;
    }
</EditForm>
@if (personType.Equals("Child"))
{
    <EditForm Model="@addPet" OnValidSubmit="@AddPet">
        <DataAnnotationsValidator/>
        <div style="float: left;width: 100%;height:auto">
            <p style="float: left;position: relative;height: 32px;top: 4px">
                Pet:    Id:<input type="number" min="0" style="width:150px" @bind="@addPet.Id"/>
            </p>
            <p style="float: left;position: relative;height: 32px;top: 4px">
                Name:<input type="text" style="width:150px" @bind="@addPet.Name"/>
            </p>
            <p style="float: left;position: relative;height: 32px;top: 4px">
                Species:
            </p>
            <select class="form-control selectpicker" style="float: left;position: relative;width:auto;height: 32px;top: 4px" @bind="@addPet.Species">
                @foreach (var Species in Pet.ValidSpecies)
                {
                    <option>@Species</option>
                }
            </select>
            <p style="float: left;position: relative;height: 32px;top: 4px">
                Age:<input type="number" min="0" style="width:150px" @bind="@addPet.Age"/>
            </p>
            <button class="btn-primary" type="submit" style="float: left;position: relative;width:auto;left:10px;height: 32px;top: 4px;border-radius: 5px">Add</button>
        </div>
        <div style="float: left;width: 100%;height:auto">
            <p style="color: red">@errorForPet</p>
            <ValidationSummary/>
        </div>
    </EditForm>
    <div style="float: left;width: 100%">
        @if (pets==null)
        {
            <p>       
                <em>Loading...</em>
            </p>
        }
        else if (pets.Count==0)
        {
            <p>       
                <em>Can't find any pet.</em>
            </p>
        }
        else 
        {
            <table class="table">        
                <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Species</th>
                    <th>Age</th>
                    <th>Delete</th>
                </tr>
                </thead>        
                <tbody>
                @foreach (var pet in pets)
                {
                    <tr>
                        <td>@pet.Id</td>
                        <td>@pet.Name</td>
                        <td>@pet.Species</td>
                        <td>@pet.Age</td>
                        <td>
                            <button @onclick="@(() => RemovePet(pet))">
                                <i class="oi oi-delete" style="color: red"/>
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>
}

@code {
    private Person newPerson;
    private string personType;
    private string error;
    private string jobTitle;
    private List<Interest> interests;
    private List<Pet> pets;
    private string errorForPet;
    private Pet addPet;

    protected override async Task OnInitializedAsync()
    {
        if (MainLayout.IsLogin())
        {
            newPerson = new Person
            {
                Id = 0,
                FirstName = null,
                LastName = null,
                HairColor = Person.ValidHairColor[0],
                EyeColor = Person.ValidEyeColor[0],
                Age = 0,
                Weight = 0,
                Height = 0,
                Sex = Person.ValidSex[0],
            };
            jobTitle = Adult.ValidJob[0];
            interests = new List<Interest>();
            pets = new List<Pet>();
            personType = "Adult";
            addPet = new Pet
            {
                Species = Pet.ValidSpecies[0]
            };
        }
        else
        {
            NavigationManager.NavigateTo("");
        }
    }

    private void ChooseInterest(string chooseInterest)
    {
        if (HasInterest(chooseInterest))
        {
            foreach (var interest in interests.Where(interest => interest.Type.Equals(chooseInterest)))
            {
                interests.Remove(interest);
                break;
            }
        }
        else
        {
            interests.Add(new Interest{Type = chooseInterest});
        }
    }

    private bool HasInterest(string chooseInterest)
    {
        foreach (var interest in interests.Where(interest => interest.Type.Equals(chooseInterest)))
        {
            return true;
        }
        return false;
    }
    
    private void AddPet()
    {
        errorForPet = null;
        foreach (var x in pets.Where(x => x.Id == addPet.Id))
        {
            errorForPet = "This pet id is used.";
            break;
        }
        if (errorForPet==null)
        {
            pets.Add(addPet);
            addPet = new Pet
            {
                Species = addPet.Species
            };
        }
    }
    
    private void RemovePet(Pet pet)
    {
        foreach (var x in pets.Where(x => x.Id == pet.Id))
        {
            pets.Remove(x);
            break;
        }
        errorForPet = null;
    }
    
    private async Task AddNewPerson()
    {
        switch (personType)
        {
            case "Adult":
                error = await ModelManager.AddAdultAsync(new Adult
                {
                    Id = newPerson.Id,
                    FirstName = newPerson.FirstName,
                    LastName = newPerson.LastName,
                    HairColor = newPerson.HairColor,
                    EyeColor = newPerson.EyeColor,
                    Age = newPerson.Age,
                    Weight = newPerson.Weight,
                    Height = newPerson.Height,
                    Sex = newPerson.Sex,
                    JobTitle = jobTitle
                });
                break;
            case "Child":
                error = await ModelManager.AddChildAsync(new Child
                {
                    Id = newPerson.Id,
                    FirstName = newPerson.FirstName,
                    LastName = newPerson.LastName,
                    HairColor = newPerson.HairColor,
                    EyeColor = newPerson.EyeColor,
                    Age = newPerson.Age,
                    Weight = newPerson.Weight,
                    Height = newPerson.Height,
                    Sex = newPerson.Sex,
                    ChildInterests = interests,
                    Pets = pets
                });
                break;
        }
        if (string.IsNullOrEmpty(error))
        {
            NavigationManager.NavigateTo("AllPerson");
        }
    }
}