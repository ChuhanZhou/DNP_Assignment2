@page "/"
@using Assignment2.Data
@using Assignment2.Models.Unit

@inject IModelManager ModelManager
@inject NavigationManager NavigationManager

<div style="float: left;width: 100%;height: auto">
    <button class="btn-primary" style="float: right;position: relative;width:auto;right:15%;height: 40px;border-radius: 5px" @onclick="ChangeState">@otherTitle</button>
</div>
<div style="float: left;width: 100%;height: auto">
    <div style="margin: auto">
        <h1 style="text-align: center">@title</h1>
        <div style="background: gray;margin: 40px auto;width: 300px;height: 50px">
            <span class="oi oi-person" style="float: left;width:50px;height: 50px;color: white;font-size: xx-large;line-height:50px;text-align: center"></span>
            <input type="text" placeholder="User Name" style="float: left;width:250px;height: 50px" @bind="@newUser.UserName"/>
        </div>
        <div style="background: gray;margin: 40px auto;width: 300px;height: 50px">
            <span class="oi oi-key" style="float: left;width:50px;height: 50px;color: white;font-size: xx-large;line-height:50px;text-align: center"></span>
            <input type="password" placeholder="Password" style="float: left;width:250px;height: 50px" @bind="@newUser.Password"/>
        </div>
        @if (title.Equals("Register"))
        {
            @if (newUser.Password==confirmPassword&&!string.IsNullOrEmpty(confirmPassword))
            {
                <div style="background: green;margin: 40px auto;width: 300px;height: 50px">
                    <span class="oi oi-circle-check" style="float: left;width: 50px;height: 50px;color: white;font-size: xx-large;line-height:50px;text-align: center"></span>
                    <input type="password" placeholder="Confirm Password" style="float: left;width:250px;height: 50px" @bind="@confirmPassword"/>
                </div>
            }
            else
            {
                <div style="background: red;margin: 40px auto;width: 300px;height: 50px">
                    <span class="oi oi-circle-x" style="float: left;width: 50px;height: 50px;color: white;font-size: xx-large;line-height:50px;text-align: center"></span>
                    <input type="password" placeholder="Confirm Password" style="float: left;width:250px;height: 50px" @bind="@confirmPassword"/>
                </div>
            }
        }
        <div style="margin: 0px auto;width: 300px;height: auto">
            <p style="color: red">
                @error
            </p>
        </div>
        @switch (title)
        {
            case "Login":
                <div style="background: #1b6ec2;margin: 40px auto;width: 300px;height: 50px">
                    <button class="btn btn-primary" style="width: 100%;height: 100%;border-radius: 0px" @onclick="Login">Login</button>
                </div>
                break;
            case "Register":
                <div style="background: #1b6ec2;margin: 40px auto;width: 300px;height: 50px">
                    <button class="btn btn-primary" style="width: 100%;height: 100%;border-radius: 0px" @onclick="Register">Confirm</button>
                </div>
                break;
        }
    </div>
</div>

@code {
    private string title;
    private string otherTitle;
    private string error;
    private User newUser;
    private string confirmPassword;

    protected override async Task OnInitializedAsync()
    {
        if (MainLayout.IsLogin())
        {
            NavigationManager.NavigateTo("AllFamily");
        }
        else
        {
            newUser = new User
            {
                UserName = null, 
                Password = null
            };
            title = "Login";
            otherTitle = "Register";
            confirmPassword = null;
            error = null;
        }
        
    }

    private void ChangeState()
    {
        if (title.Equals("Login"))
        {
            title = "Register";
            otherTitle = "Login";
        }
        else if (title.Equals("Register"))
        {
            title = "Login";
            otherTitle = "Register";
        }
        newUser = new User
        {
            UserName = null,
            Password = null
        };
        confirmPassword = null;
        error = null;
    }

    private async Task Login()
    {
        var result = await ModelManager.LoginAsync(newUser);
        if (result)
        {
            MainLayout.Login();
            UserInformation.SetInfo(newUser.UserName);
            NavigationManager.NavigateTo("AllFamily");
        }
        else
        {
            error = "Wrong user name or password.";
        }
    }

    private void Register()
    {
        if (!string.IsNullOrEmpty(newUser.Password)&&!string.IsNullOrWhiteSpace(newUser.UserName)&&!string.IsNullOrEmpty(newUser.UserName))
        {
            if (newUser.Password==confirmPassword)
            {
                error = ModelManager.AddUser(newUser);
                if (error == null)
                {
                    MainLayout.Login();
                    UserInformation.SetInfo(newUser.UserName);
                    NavigationManager.NavigateTo("AllFamily");
                }
            }
            else
            {
                error = "Please write a correct confirm password.";
            }
        }
        else
        {
            error = "Please write a username and password.";
        }
    }
}